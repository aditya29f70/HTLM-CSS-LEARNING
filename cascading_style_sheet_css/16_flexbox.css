/* go to mdn and search flexbox*/
/* https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Flexbox */

/* Flexbox is a one-dimensional layout method for 
arranging items in rows or columns. */


/* as we know in layout topic we have to learn
1. position
2. flex-box
3. grid */
/* you have to remember two things
1. two axis of flex box ''main-axis'' and cross-axis
main-axis; define -> main direction and cross axis
run perpendicular to it 
 */
/* eg if our main axis is 'x-axis' then the cross axis will be 'y-axis' */


/* main axis property
1. row
2. row-reverse
3. column
4. column-reverse */
/* note:::::::::: must first make container class */
/* so you need to remember the concept of container
if you want to work with flex box for some collection of children
you for that you must have a container so flex box work will be done inside that container
*/


* {
  margin: 0;
  padding: 0;
}

body {
  height: 100vh;
  background: violet;
}

.container {
  border: 2px solid white;
  width: 800px;
  height: 400px;
  margin: 20px auto;
  /* flexbox stuff here */
  display: flex;
  /* flex-direction: row; */
  /* below we are changing the main direction 
  in the direction of column */
  /* flex-direction: column; */
  /* flex-direction: row-reverse; */
  /* flex-direction: column-reverse; */
  /* justify-content: center; */
  /* justify-content: space-around ; */
  /* justify-content: space-between; */
  /* flex-wrap: wrap-reverse; */
  /* flex-wrap: wrap; */
  
  /* align-items: flex-end; */
  /* align-items: center; */
  /* if you want totaly perfect center alignment children
  so you justify-content and align-items to be center */
  /* justify-content: space-around;
  align-items: flex-end; */
  /* flex-wrap: wrap; */
  /* align-content: center; */
  /* align-content: space-around; */
  /* align-content: space-between; */

}

.container .child{
  width: 400px;
  height: 50px;
  background: rgb(64, 64, 177);
  text-align: center;
  margin: 5px;
}

.special{
  /* order: 1; */
  /* align-self: center; */
  /* flex-grow: 2; */
  /* flex-basis: 10px; */
  flex-shrink: 5;
}

.special-two{
  /* flex-grow: 4;
  flex-basis: 100px; */
  flex-shrink: 2;
}


/* if you want with flex box you need few things
1. thing you have to remember you are working on the 
''container'' 
2. you are going to see first display property
we have already see display methods(inline, block, inline-block, none)*/
/* here we use display:flex  after that flex give default style to the children
styling would we flex-direction: row ;like some */

/* 2nd flex-propertys
* flex-direction : by default value is row you can set ''column'' also */

/* row-reverse; if our main axis here row so reverse would be such that  */

/* 3rd jsutify-content;  https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content */
/* The CSS justify-content property defines how the browser distributes space
 between and around content items along the main axis of a flex container and 
 the inline axis of grid and multicol containers. */
/* some justify-content attributes */
 /* space-around; gives some space around all children  */
/* space-between; gives space only between the children block */

/* 4. flex-wrap:wrap  if you have lot of children in one line and
you want to push it in another line you can use it*/
/* and by default their value is ''nowrap'' so that will give you no wrap
so if you want wrap so you have to use ''wrap''*/
/* some attribute */
/* 1. wrap-reverse; it will reverse the wrap or make it down */


/* 5. align-items; property of cross axis
 https://developer.mozilla.org/en-US/docs/Web/CSS/align-items*/
/* it controls the alignment of items on the cross axis. In grid layout, it controls the alignment of items on the block axis within their grid areas. */
/* by default  it's value is flex-start */

/* 6. align-content property of cross axis; and for that you have to set flex-wrap:wrap then after it will run
 https://developer.mozilla.org/en-US/docs/Web/CSS/align-content */
/* The CSS align-content property sets the distribution of space between and 
around content items along a flexbox's cross axis, or a grid or block-level element's block axis. */
/* default value ; stretch */




/* ######## now time to see display property in 
children */
/* 1. flex-box order property ; https://developer.mozilla.org/en-US/docs/Web/CSS/order */
/* by default all of the children have default value 0 as order*/
/* The order CSS property sets the order to lay out an item in a flex or grid container. 
Items in a container are sorted by ascending order value and then by their source code order. 
Items not given an explicit order value are assigned the default value of 0. */


/* 2. align-self; https://www.w3schools.com/cssref/css3_pr_align-self.php */
/* The align-self property specifies the alignment in the block direction for 
the selected item inside a flexbox or grid container. */
/* Tip: To align a grid item in the inline direction instead of the block direction, use 
justify-self or justify-items properties. */
/* Note: The align-self property overrides the grid or flexible 
container's align-items property. */
/* note; container should display flex */


/* 3. flex-grow The flex-grow property specifies how much the item will grow relative to the rest of the flexible items inside the same container.
Note: If the element is not a flexible item, the flex-grow property has no effect.*/
/* Default value:	0 */

/* 4. flex-basis; https://www.w3schools.com/cssref/css3_pr_flex-basis.php */
/* The flex-basis property specifies the initial length of a flexible item. */
/* Note: If the element is not a flexible item, the flex-basis property has no effect. */
/* 
Default value:	auto */


/* 5. flex-shrink; https://www.w3schools.com/cssref/css3_pr_flex-shrink.php */
/* The flex-shrink property specifies how the item will shrink relative to the rest of the flexible items inside the same container.

Note: If the element is not a flexible item, the 
flex-shrink property has no effect. */
/* 
Default value:	1 */
/* note: for that you have to give some '''width'' to the children */


